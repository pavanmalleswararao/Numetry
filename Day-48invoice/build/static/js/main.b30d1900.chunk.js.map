{"version":3,"sources":["component/toPdf.js","App.js","reportWebVitals.js","index.js"],"names":["StyleSheet","create","page","flexDirection","backgroundColor","section","margin","padding","image","width","App","useState","name","setName","date","setDate","useRef","className","type","value","onChange","e","target","placeholder","document","fileName","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+SAGeA,aAAWC,OAAO,CAC/BC,KAAM,CACJC,cAAe,MACfC,gBAAiB,WAEnBC,QAAS,CACPC,OAAQ,GACRC,QAAS,IAEXC,MAAO,CACLC,MAAO,MACPF,QAAS,MCqBEG,MA9Bf,WACE,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAuBF,mBAAS,IAAhC,mBAAOG,EAAP,KAAYC,EAAZ,KAIA,OAHgBC,iBAAO,MAIvB,sBAAKC,UAAU,MAAf,UACG,uBAAOC,KAAK,OAAON,KAAK,aAAaO,MAAOP,EAAMQ,SAAU,SAACC,GAAD,OAAKR,EAAQQ,EAAEC,OAAOH,QAAQI,YAAY,SACtG,uBAAOL,KAAK,OAAON,KAAK,OAAOO,MAAOL,EAAMM,SAAU,SAACC,GAAD,OAAKN,EAAQM,EAAEC,OAAOH,QAAQI,YAAY,SAChG,cAAC,kBAAD,CACaC,SACC,uBACCZ,KAAMA,EACNE,KAAMA,IAGRW,SAAQ,UAAKb,EAAL,aAPrB,SASc,qBAAGc,QAEA,+CAEA,qDChBPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BZ,M","file":"static/js/main.b30d1900.chunk.js","sourcesContent":["import React from \"react\";\nimport { Document, Page, Text, View, StyleSheet} from \"@react-pdf/renderer\";\n\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: \"row\",\n    backgroundColor: \"#E4E4E4\",\n  },\n  section: {\n    margin: 10,\n    padding: 10,\n  },\n  image: {\n    width: \"50%\",\n    padding: 10\n  },\n});\n\nconst ToPdf = ({name,date}) => {\n  return (\n    <Document>\n      <Page size=\"A4\" style={styles.page}>\n        <View style={styles.section}>\n          <Text>{name}</Text>\n        </View>\n        <View style={styles.section}>\n          <Text>{date}</Text>\n        </View>\n      </Page>\n    </Document>\n  );\n};\n\nexport default ToPdf;\n","import React, { useRef, useState } from \"react\";\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\nimport toPdf from \"./component/toPdf\";\n\n\nfunction App() {\n  const [name,setName] = useState(\"\");\n  const [date,setDate] = useState(\"\");\n  const formRef = useRef(null);\n\n\n  return (\n  <div className=\"App\">\n     <input type=\"text\" name=\"Receipt To\" value={name} onChange={(e)=>setName(e.target.value)} placeholder=\"Name\" />\n     <input type=\"text\" name=\"Date\" value={date} onChange={(e)=>setDate(e.target.value)} placeholder=\"Date\" />\n     <PDFDownloadLink\n                  document={\n                   <toPdf \n                    name={name}\n                    date={date}\n                   />\n                  }\n                  fileName={`${name}_bill.pdf`}\n                >\n                  {({ loading }) =>\n                    loading ? (\n                      <button>Loading..</button>\n                    ) : (\n                      <button >download</button>\n                    )\n                  }\n                </PDFDownloadLink>\n  </div>)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}